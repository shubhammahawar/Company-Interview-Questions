Question Link : https://practice.geeksforgeeks.org/problems/merge-k-sorted-linked-lists/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Approach : Divide and Conquer 

Follow the steps below to solve the problem:

Pair up K lists and merge each pair in linear time using O(N) space.
After the first cycle, K/2 lists are left each of size 2*N. After the second cycle, K/4 lists are left each of size 4*N and so on.
Repeat the procedure until we have only one list left.

  T.C = O(N*K*logK)
  S.C = O(N*K)

class Solution
{

 /* Takes two lists sorted in increasing order, and merge
    their nodes together to make one big sorted list. Below
    function takes O(Log n) extra space for recursive calls,
    but it can be easily modified to work with same time and
    O(1) extra space  */

Node mergeSorted(Node a, Node b){

    Node result = null;

    if(a==null)
    return b;
    else if(b==null)
    return a;

    if(a.data<=b.data){
      result = a;
      result.next=mergeSorted(a.next, b);
    }

    else{
        result=b;
        result.next = mergeSorted(a,b.next);
    }

    return result;
} 
       
    //Function to merge K sorted linked list.
    Node mergeKList(Node[]arr,int K)
    {
        //Add your code here.
        
        int k = arr.length -1;
        
     // repeat until only one list is left
        while(k!=0){

            int i=0;
            int j=k;

               // merge List i with List j and store
                // merged list in List i
                
            while(i<j){

                arr[i]=mergeSorted(arr[i], arr[j]);
                i++;     // consider next pair
                j--;

                if(i>=j)  // If all pairs are merged, update last
                k=j;
            }
        }
return arr[0];
        
    }
}
