You are running a classroom and suspect that some of your students are passing around the answer to 
a multiple-choice question in 2D grids of letters. The word may start anywhere in the grid, and 
consecutive letters can be either immediately below or immediately to the right of the previous letter.

Given a grid and a word, write a function that returns the location of the word in the grid as a list of coordinates. 
If there are multiple matches, return any one.


// "static void main" must be defined in a public class.

//Input :

// char[][] grid = {
//           {'b','b','b','a','l','l','o','o'},
//           {'b','a','c','c','e','s','c','n'},
//           {'a','l','t','e','w','c','e','w'},
//           {'a','l','o','s','s','e','c','c'},
//           {'w','o','o','w','a','c','a','w'},
//           {'i','b','w','o','w','w','o','w'}
//       };
        
//     List<String>words = List.of("access","balloon","wow","sec","bbaal");


// Output - 

// [[1, 1], [1, 2], [1, 3], [2, 3], [3, 3], [3, 4]]
// [[0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 7]]
// [[4, 3], [5, 3], [5, 4]]
// [[3, 4], [3, 5], [4, 5]]
// [[0, 0], [1, 0], [2, 0], [3, 0], [3, 1]]

public class Main {
    
    public static boolean findActualLocation(char[][]grid, String word, int i, int j, List<int[]>path){
        
        if(word.length()==0)
            return true;
        
        //check downside
        if(i+1<grid.length && grid[i+1][j]==word.charAt(0)){
            List<int[]>path1 = new ArrayList<>(path);
            path1.add(new int[]{i+1, j});
            if(findActualLocation(grid, word.substring(1), i+1,j,path1))
            {
                path.clear();
                path.addAll(path1);
                return true;
            }
        }
        
        //check rightside
        
        if(j+1<grid[i].length && grid[i][j+1]==word.charAt(0) ){
            List<int[]>path2 = new ArrayList<>(path);
            path2.add(new int[]{i,j+1});
            if(findActualLocation(grid,word.substring(1),i, j+1,path2)){
                path.clear();
                path.addAll(path2);
                return true;
            }
        }
        
        return false;
    }
    
    public static List<int[]> findWordCordinate(char[][]grid, String word){
        
        List<int[]>path = new ArrayList<>();
        
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                
                if(grid[i][j]==word.charAt(0)){
                    if(findActualLocation(grid, word.substring(1), i,j,path)){
                        path.add(0, new int[]{i,j});
                        return path;
                    }
                    
                }
            }
        }
        return path;
    }
    
    public static List<List<int[]>> findWordLocation(char[][] grid, List<String>words){
    
        List<List<int[]>> result = new ArrayList<>();
        for(String word : words){
            List<int[]>path=findWordCordinate(grid, word);
            
            // if (!path.isEmpty()) {
            //     for (int[] coords : path) {
            //         grid[coords[0]][coords[1]] = '*';
            //     }
            // }
            result.add(path);
        }
        return result;
            
        }
    
    
    public static void main(String[] args) {
       char[][] grid = {
           {'b','b','b','a','l','l','o','o'},
           {'b','a','c','c','e','s','c','n'},
           {'a','l','t','e','w','c','e','w'},
           {'a','l','o','s','s','e','c','c'},
           {'w','o','o','w','a','c','a','w'},
           {'i','b','w','o','w','w','o','w'}
       };
        
     List<String>words = List.of("access","balloon","wow","sec","bbaal");
     List<List<int[]>> result = findWordLocation(grid, words);

    // Print the result in a readable format
    for (List<int[]> path : result) {
        System.out.println(Arrays.deepToString(path.toArray()));
    }
           
    }
}

