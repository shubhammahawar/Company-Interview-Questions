Question Link : https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

// Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1).
Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). 
Value 0 at a cell in the matrix represents that it is blocked and rat cannot move to it while value 1 at a cell in the matrix represents that rat can be travel through it.

class Solution {
    
    static void  findPath (int i, int j, int n, int[][]m, ArrayList<String>ans, String move, 
    int visited[][], int[] countNoOfPath)
    {  
        
        if(i==n-1 && j==n-1){
            countNoOfPath[0] = countNoOfPath[0]+1;
            ans.add(move);
            return;
        }
        
  
  // Traversing down      
        if(i+1<n &&m[i+1][j]==1 && visited[i+1][j]==0 ) {
            visited[i][j]=1;
        findPath(i+1, j,n,m,ans,move+'D',visited, countNoOfPath);
        visited[i][j]=0;
        }
        
  
  //Traversing left      
        if(j-1>=0 && m[i][j-1]==1 && visited[i][j-1]==0){
            visited[i][j]=1;
            findPath(i, j-1,n,m,ans, move+'L',visited,countNoOfPath);
            visited[i][j]=0;
        }
        
        
    //Trvarsing Right    
        if(j+1<n && m[i][j+1]==1 && visited[i][j+1]==0){
            visited[i][j]=1;
            findPath(i, j+1,n,m,ans, move+'R',visited,countNoOfPath);
            visited[i][j]=0;
        }
        
        
        //Traversing UP
        if(i-1>=0 && m[i-1][j]==1 && visited[i-1][j]==0){
            visited[i][j]=1;
            findPath(i-1, j, n, m , ans, move+'U', visited,countNoOfPath);
            visited[i][j]=0;
        }
        
    }
    
    
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        
        ArrayList<String> ans = new ArrayList<>();
        int visited[][] = new int[n][n];
        visited[0][0]=1;
      
        
        int [] countNoOfPath = new int[1];
        
        if(m[0][0]==1)
        findPath(0,0,n,m,ans,"", visited, countNoOfPath);
        
        // countNoOfPath - count the no of ways to reach from 0,0 to n-1 n-1
        
    //    System.out.println("no of ways to move from 0,0 to n-1 ,n-1 "+ countNoOfPath[0]);
        
        return ans;
    }
}
