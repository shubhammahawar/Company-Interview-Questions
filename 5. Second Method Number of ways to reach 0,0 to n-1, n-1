Question Link : https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

/ User function Template for Java

// m is the given matrix and n is the order of matrix

// In this approch we are using 2 different arrays that are storing the i, j index direction only to 
// remove the 4 if condition

//   int diri[] = {+1, 0, 0, -1};
 //       int dirj[] = {0, -1, +1, 0};
 
class Solution {
    
    static void  findPath (int i, int j, int n, int[][]m, ArrayList<String>ans, String move, 
    int visited[][], int[] countNoOfPath, int diri[], int dirj[])
    {  
        
        if(i==n-1 && j==n-1){
            countNoOfPath[0] = countNoOfPath[0]+1;
            ans.add(move);
            return;
        }
        
        String dir = "DLRU";
        
        for(int ind=0;ind<4;ind++){
            
            int nexti = i+diri[ind]; // this way you will travel in all 4 direction in a loop
            int nextj = j+dirj[ind];
            
            
            if(nexti>=0 && nextj>=0 && nexti<n && nextj<n && visited[nexti][nextj]==0 && m[nexti][nextj]==1 ){
                 visited[i][j]=1;
                findPath(nexti, nextj,n,m,ans,move+dir.charAt(ind),visited, countNoOfPath,diri, dirj);
                 visited[i][j]=0;
            }
            
        }
  
  
        
    }
    
    
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        
        ArrayList<String> ans = new ArrayList<>();
        int visited[][] = new int[n][n];
        visited[0][0]=1;
        
        int diri[] = {+1, 0, 0, -1};
        int dirj[] = {0, -1, +1, 0};
      
        
        int [] countNoOfPath = new int[1];
        
        if(m[0][0]==1)
        findPath(0,0,n,m,ans,"", visited, countNoOfPath, diri, dirj);
        
        // countNoOfPath - count the no of ways to reach from 0,0 to n-1 n-1
        
    //    System.out.println("no of ways to move from 0,0 to n-1 ,n-1 "+ countNoOfPath[0]);
        
        return ans;
    }
}
